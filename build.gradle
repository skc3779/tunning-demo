apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'maven'

version = '1.0'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://repo.springsource.org/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1.2'
    }
}

ext {
    javaVersion = 1.8
    slf4jVersion = '1.7.5'
    springVersion = "4.0.6.RELEASE"
}

version = '1.0'

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'me.champeau.gradle.jmh'

    sourceCompatibility = rootProject.ext.javaVersion
    targetCompatibility = rootProject.ext.javaVersion

    /* start sourceSets */
    String hostname = InetAddress.getLocalHost().getHostName().toLowerCase();
    if (hostname.endsWith('.local')) {
        hostname = hostname.replace(".local", '')
    }
    sourceSets {
        main.java.srcDirs = ['src/main/java']
        jmh.java.srcDirs = ['src/jmh/java']
        main.resources.srcDirs = ['src/main/resources', "src/main/resources-" + hostname]
        jmh.resources.srcDirs = ['src/jmh/resources', "src/jmh/resources-" + hostname]
    }
//    sourceSets.all {
//        println 'sourceSets.all : ' + name
//    }
    sourceSets.all {
        set ->
            set.allSource.srcDirs.each {
                if (!it.exists()) {
                    // println it
                    it.mkdirs()
                }
            }
    }
    /* end sourceSets */

    /* start logs folder create */
    def logsDir = new File('logs')
    if (!logsDir.isDirectory()) {
        logsDir.mkdirs()
    }
    /* end logs folder create */

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {

        compile 'org.slf4j:slf4j-api:1.7.6'
        compile 'org.slf4j:jcl-over-slf4j:1.7.6'
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'ch.qos.logback:logback-core:1.0.13'

        compile "org.slf4j:jcl-over-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:log4j-over-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:slf4j-api:${rootProject.ext.slf4jVersion}"

        provided 'org.projectlombok:lombok:1.12.6'
        testCompile "junit:junit:4.11"
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'org.unitils:unitils-core:3.4.2'
        testCompile "org.springframework:spring-test:${rootProject.ext.springVersion}"

        jmh 'commons-io:commons-io:2.4'
        jmh 'org.openjdk.jmh:jmh-core:0.9.5'
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:0.9,5'
        testCompile 'org.openjdk.jmh:jmh-core-benchmarks:0.9.5'
        testCompile 'org.openjdk.jmh:jmh-samples:0.9.5'

    }

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

/**
 * jmh setting
 *
 * http://openjdk.java.net/projects/code-tools/jmh
 * https://github.com/gvsmirnov/jmh-gradle-sample
 * https://github.com/melix/jmh-gradle-plugin
 * https://github.com/melix/jmh-gradle-example
 *
 */

jmh {
    include = 'org.kangchun.jmh.SetAdd.*'
    humanOutputFile = null
    resultsFile = null
    benchmarkMode = 'all' // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    iterations = 1 // Number of measurement iterations to do.
    timeOnIteration = '1s' // Time to spend at each measurement iteration.
    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
    warmupIterations = 1 // Number of warmup iterations to do.
    warmup = '1s' // Time to spend at each warmup iteration
    warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.

/*

    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
    resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
    threads = 1 // Number of worker threads to run with.
    threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
    operationsPerInvocation = 1 // Operations per invocation.
*/
}